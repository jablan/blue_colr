#!/usr/bin/env ruby

# daemon to run blue_colr processes

require "rubygems"
require 'date'
require 'yaml'
begin
  require 'log4r' # try using log4r if available
  require 'log4r/outputter/emailoutputter'
  require 'log4r/yamlconfigurator'
#  include Log4r
rescue LoadError
  require 'logger' # otherwise, use plain ruby's one
end
require "optparse"
require 'sequel'
require 'blue_colr'
require 'fileutils'

def logger(name = nil)
  @logger[name || @environment] || @logger['default']
end

def init_logger
  if Module::const_defined?(:Log4r) && @conf['log4r_config']
    log_cfg = Log4r::YamlConfigurator # shorthand
    log_cfg['ENVIRONMENT'] = @environment if @environment
    log_cfg['LOGFILENAME'] = @log_file

    # load the YAML file with this
    log_cfg.decode_yaml(@conf['log4r_config'])

    @logger = Log4r::Logger
  else
    @logger = {'default' => Logger.new(@log_file || STDOUT)}
  end
  logger.level = @args['debuglevel'] || Logger::WARN
end

def parse_command_line(args)
  data = {}
  
  OptionParser.new do |opts|
    opts.banner = "Usage: bluecolrd [options]"
  
    opts.on("-c CONFIG", "--conf CONFIG", "YAML config file") do |config|
      data["config"] = config
    end

    opts.on("-e NAME", "--environment NAME", "Environment name (e.g. test, production etc.) to work on (default none)") do |env|
      data["environment"] = env
    end
    
    opts.on("-m COUNT", "--max-count COUNT", "Max number of simultaneous processes to start.") do |count|
      data["max"] = count.to_i
    end

    opts.on("-l LOGFILE", "--logfile LOGFILE", "File to log to.") do |logfile|
      data["logfile"] = logfile
    end

    opts.on("-d LEVEL", "--debuglevel LEVEL", "Debug level to use (0 - DEBUG, 1 - INFO etc).") do |level|
      data['debuglevel'] = level.to_i
    end

    opts.on_tail('-h', '--help', 'display this help and exit') do
      puts opts
      return nil
    end
    
    opts.parse(args)
  end
  
  return data
end

# check whether it's ok to spawn another process
def ok_to_run?
  # check the limit of max processes, if given
  @max_processes == 0 || ThreadGroup::Default.list.size <= @max_processes
#  !@args['max'] || @pids.size < @args['max']
end

def run process, running_state
  logger.debug "Running process ##{process[:id]}:"
  script = process[:cmd]
  logger.debug script
  id = process[:id]

  # update process item in the db
  # set status of process_item to "running"
  @db[:process_items].filter(:id => id).update(:status => running_state, :started_at => Time.now)

  log_path = @conf['log_path'] || '.'
  log_path = (process[:process_from] || Time.now).strftime(log_path) # interpolate date

  FileUtils.mkdir_p log_path
  log_file = File.join(log_path, "#{id}.out")
  # run actual command
  Thread.new do
    begin
      Dir.chdir(process[:chdir]) if process[:chdir]
      Kernel.system("#{script} >> #{log_file} 2>&1")
      ok = $?.success?
      exitstatus = $?.exitstatus
    rescue
      # do nothing, just exit with error
      # this usually means that exec tried to execute a file that doesn't exist
      ok = false
      exitstatus = 99
    end

    final_state = BlueColr.state_from_running(running_state, ok)
    # find corresponding process_item
    # change its status in the DB and update ended_at timestamp
    @db[:process_items].filter(:id => process[:id]).update(
      :status => final_state,
      :exit_code => exitstatus,
      :ended_at => Time.now
    )
#    logger(process[:logger]).error(@error_log_msg % process.to_hash) unless ok

#    logger.info "Process ended: id #{process[:id]} #{$?}"
  end
end

# MAIN PROGRAM STARTS HERE

# pid => process, hash of started processes
@pids = {}

@args = parse_command_line(ARGV)

raise "No configuration file defined (-c <config>)." unless @args && @args["config"]
raise "Couldn't read #{@args["config"]} file." unless @args['config'] && @conf = YAML::load(File.new(@args["config"]).read)
BlueColr.conf = @conf
@max_processes = @args['max'] || @conf['max_processes'] || 0 # default unlimited
@environment = @args['environment'] || @conf['environment'] || nil
@log_file = @args['logfile'] || "process_daemon_#{@environment}.log"
@error_log_msg = @conf['error_log_msg'] || 'Process failed: id %{id}'

init_logger

begin
  @db = Sequel.connect(@conf['db_url'], :logger => logger('sequel')) # try to use sequel logger, if defined

  logger.info 'Starting daemon'

  loop do
    # get all pending items
    pending_processes = @db[:process_items].filter(:status => BlueColr.get_pending_states).filter(:environment => @environment).all
    pending_processes = pending_processes.map do |process|
      # get all the parents' statuses
      parent_statuses = @db[:process_items].
        join(:process_item_dependencies, :depends_on_id => :id).
        filter(:process_item_id => process[:id]).
        select(:status).
        map{|h| h[:status]}

      running_status = BlueColr.state_from_pending(process[:status], parent_statuses)
      [process, running_status]
    end

    pending_processes.select{|_, running_status| running_status}.each do |process, running_status|
      logger.debug "Pending item: #{process[:id]}"
      if ok_to_run?
#          item = @db[:process_items].filter(:id => id[:id]).first
        run(process, running_status)
      else
        logger.debug "No available thread, waiting"
      end

    end
    Kernel.sleep 5
#    Kernel.sleep(@conf['sleep_interval'] || 10)
  end # loop

#rescue Interrupt
#  if logger
#    logger.fatal("Ctrl-C received, exiting")
#  else
#    puts "Ctrl-C received, exiting"
#  end
#  exit 1
rescue Exception => ex
  p ex.class
  logger.fatal(ex.to_s) if logger
  puts "#{ex.to_s} ==>"
  puts ex.backtrace.join("\n")
  exit 1
end

