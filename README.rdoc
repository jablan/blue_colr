= blue_colr, database-based process launcher

== Overview

blue_colr allows you to easily launch processes using database as a queue. It
consists of +bluecolrd+, a deamon that executes whatever finds in a queue,
and a DSL for enqueuing processes that enables you to easily describe the order
and dependencies of processes.

== Installation

  git clone git://github.com/jablan/blue_colr.git
  cd blue_colr
  gem build blue_colr.gemspec
  gem install blue_colr-0.0.6.gem

You may want to install +log4r+ gem as well, as it provides more powerful logging
features than builtin Ruby's +Logger+.

== Example

  require 'blue_colr'

  BlueColr.start do
    run 'echo These processes'
    run 'echo will be ran sequentially.'
    parallel do
      run 'echo And these'
      sequential do
        run 'echo (but not'
        run 'echo these two)'
      end
      run 'echo in parallel.'
    end
    run 'echo These will execute'
    run 'echo after all above are finished.'
  end

Previous code will queue processes within the database, keeping them in
dependency order. Those within +sequential+ block (and in root block, by
default) will run each after the one before finishes. Those within +parallel+
block will run in parallel. The commands after +parallel+ block will be executed
after _all_ the commands in +parallel+ block are sucessfully finished.

Note: the code above will not _start_ the processes by itself, but enqueue them
to the databse, by default. A separate process called +bluecolrd+ is
used for that.

== <tt>bluecolrd</tt>

Blue_colr daemon is constantly running, checking the database for newly enqueued
processes, and executing them in a subshell, observing the order.

== Enviroments

An environment is something like _category_ which you assign to a set of processes
when enqueuing them. Then you can have multiple daemons running, each one of them
targeting specific environment. That allows easy distribution of your tasks across
multiple machines, while keeping them synchronized, like the following scenario:

* Start tasks a and b on machine X and c on machine Y
* When all above are sucessfully done, start task d on machine Z

== ToDo

* Scripts to create necessarry tables
* Proper test code
* Examples

